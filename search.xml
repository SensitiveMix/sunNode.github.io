<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[redis 事务浅析]]></title>
      <url>http://sunnode.github.io/2016/10/07/redis/</url>
      <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>事务是并发控制的基本单位。所谓的事务，它是指一个操作序列，这些操作序列要不都执行，要么都不执行，它是一个不可分割的工作单位。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。</p>
<p>事务的提出主要是为了解决并发情况下保持数据一致性的问题</p>
<h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><p>事务具有以下4个特征，简称ACID:<br>● Atomic（原子性）：事务中包含的操作被看做一个逻辑单元，这个逻辑单元中的操作要么全部成功，要么全部失败。<br>● Consistency（一致性）：只有合法的数据可以被写入数据库，否则事务应该将其回滚到最初状态。<br>● Isolation（隔离性）：事务允许多个用户对同一个数据进行并发访问，而不破坏数据的正确性和完整性。同时，并行事务的修改必须与其他并行事务的修改相互独立。<br>● Durability（持久性）：事务结束后，事务处理的结果必须能够得到固化。</p>
<h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p>概述</p>
<p>Redis中的事务是一组命令的集合。事务同命令一样都是Redis的最小执行单位，一个事务中的命令要么都执行，要么都不执行。</p>
<p>事务的原理是先将一个属于事务的命令发送给Redis，然后再让Redis依次执行这些命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">redis&gt; MULTI</div><div class="line">OK</div><div class="line">redis&gt; <span class="built_in">set</span> name Yann</div><div class="line">QUEUED</div><div class="line">redis&gt; append name yezixin</div><div class="line">QUEUED</div><div class="line">redis&gt; EXEC</div><div class="line">1) OK</div><div class="line">2) (<span class="built_in">integer</span>) 11</div></pre></td></tr></table></figure></p>
<p>首先使用MULTI命令告诉Redis下面命令将是一个事务，Redis应答OK。 发送set和append命令之后，Redis返回QUEUED表示命令已经进入等待执行的事务队列中了。最后使用EXEC命令来让等待执行的事务队列中的所有命令按照发送顺序依次发送。返回值是这些命令的返回值组成的列表。</p>
<p>错误处理</p>
<p>● 语法错误，指命令不存在或者命令参数个数不对。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">redis&gt; MULTI</div><div class="line">OK</div><div class="line">redis&gt; <span class="built_in">set</span> name</div><div class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">'set'</span> <span class="built_in">command</span></div><div class="line">redis&gt; errorset name</div><div class="line">(error) ERR unknown <span class="built_in">command</span> <span class="string">'errorset'</span></div><div class="line">redis&gt; <span class="built_in">exec</span></div><div class="line">(error) EXECABORT Transaction discarded because of previous errors.</div></pre></td></tr></table></figure>
<p>只要Redis事务中存在语法错误，该事务将不会执行。</p>
<p>● 运行错误，指在命令执行时出现的错误，比如使用散列类型的命令操作字符串类型的键，这种错误在实际执行之前Redis是无法发现的。那么当出现运行错误时Redis是怎么处理的呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">redis&gt; MULTI</div><div class="line">OK</div><div class="line">redis&gt; hset name first-name ye</div><div class="line">QUEUED</div><div class="line">redis&gt; <span class="built_in">set</span> name yezixin</div><div class="line">QUEUED</div><div class="line">redis&gt; get name</div><div class="line">QUEUED</div><div class="line">redis&gt; <span class="built_in">exec</span></div><div class="line">1) (error) WRONGTYPE Operation against a key holding the wrong kind of value</div><div class="line">2) OK</div><div class="line">3) <span class="string">"yezixin"</span></div></pre></td></tr></table></figure>
<p>缺陷</p>
<p>● 遇到有查询的命令穿插在事务中，并不会返回结果</p>
<p>有上面的分析我们知道，Redis事务中的命令是进入了等待执行的事务队列中，在事务执行之前并不会返回结果，只是返回QUEUED。</p>
<p>这样会导致什么问题？ 如果后序的更新操作需要依赖于前面的查询指令，那么Redis事务便无法有效的完成任务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">redis&gt; MULTI</div><div class="line">OK</div><div class="line">redis&gt; get age</div><div class="line">QUEUED</div><div class="line">业务逻辑...</div><div class="line">redis&gt; <span class="built_in">set</span> age ccc</div><div class="line">QUEUED</div><div class="line">redis&gt; <span class="built_in">exec</span></div><div class="line">1) <span class="string">"18"</span></div><div class="line">2) OK</div></pre></td></tr></table></figure>
<p>● 事务中的每条命令都与redis服务器进行了一次网络交互</p>
<p>Redis事务指定开始后，执行一个命令都是都返回QUEUED, 那么这个入队操作是在客户端实现还是Redis服务端实现的？</p>
<p>在Redis.c中这么一段源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">int processCommand(redisClient *c) &#123;</div><div class="line">    /* Exec the <span class="built_in">command</span> */</div><div class="line">    <span class="keyword">if</span> (c-&gt;flags &amp; REDIS_MULTI &amp;&amp;</div><div class="line">        c-&gt;cmd-&gt;proc != <span class="built_in">exec</span>Command &amp;&amp; c-&gt;cmd-&gt;proc != discardCommand &amp;&amp;</div><div class="line">        c-&gt;cmd-&gt;proc != multiCommand &amp;&amp; c-&gt;cmd-&gt;proc != watchCommand)</div><div class="line">    &#123;</div><div class="line">        queueMultiCommand(c); // 将事务中的命令都放入到队列中，然后返回<span class="string">"QUEUED"</span></div><div class="line">        addReply(c,shared.queued);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (server.vm_enabled &amp;&amp; server.vm_max_threads &gt; 0 &amp;&amp;</div><div class="line">            blockClientOnSwappedKeys(c)) <span class="built_in">return</span> REDIS_ERR;</div><div class="line">        //调用该命令函数来处理命令</div><div class="line">        call(c);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> REDIS_OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由此可知，入队操作是在服务端执行的，这意味着一个事务需要客户端和服务端执行多次网络交互，明明是一个事务中的n条指令却需要通过多次网络交互，有些浪费。</p>
<p>事务特征</p>
<p>Redis事务只保证了一致性和隔离性 , 这倒也不能说是Redis的缺陷，Redis这么做是为了保持简单</p>
<p>原子性</p>
<p>从上面的Redis对事务的运行错误的处理我们知道，Redis事务在执行过程中遇到错误，并不会回滚，而是继续执行命令, 违反了原子性。</p>
<p>Redis的事务并没有关系数据库事务提供的回滚功能, 不过这也使得Redis在事务上可以保持简洁和快速。</p>
<p>事务回滚是指将一个事务已经完成的对数据库的修改操作撤销。</p>
<p>持久性</p>
<p>Redis事务不过是用队列包裹起了一组 Redis 命令，并没有提供任何额外的持久性功能，所以事务的持久性由 Redis 所使用的持久化模式决定：</p>
<ul>
<li>在单纯的内存模式下，事务肯定是不持久的。</li>
<li>在 RDB 模式下，服务器可能在事务执行之后、RDB 文件更新之前的这段时间失败，所以 RDB 模式下的 Redis 事务也是不持久的。</li>
<li>在 AOF 的“总是 SYNC ”模式下，事务的每条命令在执行成功之后，都会立即调用 fsync 或 fdatasync 将事务数据写入到 AOF 文件。但是，这种保存是由后台线程进行的，主线程不会阻塞直到保存成功，所以从命令执行成功到数据保存到硬盘之间，还是有一段非常小的间隔，所以这种模式下的事务也是不持久的。</li>
<li>其他 AOF 模式也和“总是 SYNC ”模式类似，所以它们都是不持久的。<br>隔离性和一致性</li>
</ul>
<p>Redis事务在执行的过程中，不会处理其它命令，而是等所有命令都执行完后，再处理其它命令（满足隔离性）<br>Redis事务在执行过程中发生错误或进程被终结，都能保证数据的一致性；</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>● WATCH命令实现更新操作中的查询</p>
<p>如果不用事务，那么我们更新键值实现增1的流程是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">redis&gt; get age</div><div class="line"><span class="string">"18"</span></div><div class="line">redis&gt; <span class="built_in">set</span> age 19</div><div class="line">OK</div></pre></td></tr></table></figure></p>
<p>但是上述的做法会出现竞态条件, 简单讲就是在获得键值18后，age有可能会被其他客户端修改，导致数据出现不一致性。</p>
<blockquote>
<p>竞态条件（race condition）是一个在设备或者系统试图同时执行两个操作的时候出现的不希望的状况， 但是由于设备和系统的自然特性，为了正确地执行，操作必须按照合适顺序进行。　</p>
</blockquote>
<p>如果我们用事务来做呢？但是事务中的每个命令的执行结果都是最后一起返回的，所以无法将前一条命令的结果作为下命令的参数，即在执行SET命令无法获得GET命令的返回值。</p>
<p>为了实现增1操作，我们需要能够获得键值后保证该键值不被其他客户端修改，直到操作执行完成之后才能修改该键值，这样也能防止竞态条件。</p>
<blockquote>
<p>WATCH 命令可以监控一个或多个键，一旦其中有一个键被修改（或删除),之后的事务就不会执行。监控 一直持续到EXEC命令。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">redis&gt; watch age</div><div class="line">OK</div><div class="line">redis&gt; <span class="built_in">set</span> age 19</div><div class="line">OK</div><div class="line">redis&gt; MULTI</div><div class="line">OK</div><div class="line">redis&gt; <span class="built_in">set</span> age 20</div><div class="line">QUEUED</div><div class="line">redis&gt; <span class="built_in">exec</span></div><div class="line">(nil)</div><div class="line">redis&gt; get age</div><div class="line"><span class="string">"19"</span></div></pre></td></tr></table></figure>
<p>exec执行结果为nil, 说明事务执行失败，因为watch age之后修改了age的键值导致后面的事务执行失败</p>
<blockquote>
<p>WATCH命令的作用只是监控键值被修改后阻止后一个事务执行，并不能阻止其他客户端不修改这一键&gt;  值。所以我们需要再EXEC执行之后重新执行整个流程</p>
</blockquote>
<p>所以我们就可以这样来处理：将查询业务逻辑提前，所有的Redis查询逻辑放在事务之外， 并对需要进行更新的键值执行WATCH监控， 当事务执行失败重新执行这个流程。</p>
<blockquote>
<p>我们可以通过UNWATCH 命令取消WATCH对所有键的监控, 来保证下一个事务执行不会受到影响。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker]]></title>
      <url>http://sunnode.github.io/2016/10/01/docker/</url>
      <content type="html"><![CDATA[<h2 id="docker-简介"><a href="#docker-简介" class="headerlink" title="docker 简介"></a>docker 简介</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[QQ表情插件]]></title>
      <url>http://sunnode.github.io/2016/09/22/QQ%E8%A1%A8%E6%83%85%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="经典qq表情插件"><a href="#经典qq表情插件" class="headerlink" title="经典qq表情插件"></a>经典qq表情插件</h2><blockquote>
<p>（html+nodejs应用）<br>由于目前在接触聊天室项目，接到一个需求实现一个类似QQ表情。在网上找了一款jquery经典表情插件。下面介绍一个用法：</p>
<p>HTML：</p>
<ul>
<li>首先在html页面的head中引入jQuery库文件和QQ表情插件jquery.qqFace.js文件</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-1.7.2.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery.qqFace.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>然后在body中加入以下html代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"show"</span>&gt;&lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"comment"</span>&gt;</div><div class="line">    &lt;div class=<span class="string">"com_form"</span>&gt;</div><div class="line">        &lt;textarea class=<span class="string">"input"</span> id=<span class="string">"saytext"</span> name=<span class="string">"saytext"</span>&gt;&lt;/textarea&gt;</div><div class="line">        &lt;p&gt;&lt;span class=<span class="string">"emotion"</span>&gt;表情&lt;/span&gt;&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"sub_btn"</span> value=<span class="string">"提交"</span>&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>CSS：<br>我们用CSS来美化页面，关键是表情按钮图片span.emotion的鼠标滑上与移开效果，以及调用表情插件后，显示的表情.qqFace面板效果，请看代码:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.comment&#123;width:680px; margin:20px auto; position:relative&#125;</div><div class="line">.comment h3&#123;height:28px; line-height:28px&#125;</div><div class="line">.com_form&#123;width:100%; position:relative&#125;</div><div class="line">.input&#123;width:99%; height:60px; border:1px solid <span class="comment">#ccc&#125;</span></div><div class="line">.com_form p&#123;height:28px; line-height:28px; position:relative&#125;</div><div class="line">span.emotion&#123;width:42px; height:20px; background:url(icon.gif) no-repeat 2px 2px;</div><div class="line">padding-left:20px; cursor:pointer&#125;</div><div class="line">span.emotion:hover&#123;background-position:2px -28px&#125;</div><div class="line">.qqFace&#123;margin-top:4px;background:<span class="comment">#fff;padding:2px;border:1px #dfe6f6 solid;&#125;</span></div><div class="line">.qqFace table td&#123;padding:0px;&#125;</div><div class="line">.qqFace table td img&#123;cursor:pointer;border:1px <span class="comment">#fff solid;&#125;</span></div><div class="line">.qqFace table td img:hover&#123;border:1px <span class="comment">#0066cc solid;&#125;</span></div><div class="line"><span class="comment">#show&#123;width:680px; margin:20px auto&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>jquery:<br>当我们点击页面输入框下方那个笑脸时，触发调用qqface表情插件，简单几行就搞定。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    $(<span class="string">'.emotion'</span>).qqFace(&#123;</div><div class="line"></div><div class="line">        assign:<span class="string">'saytext'</span>, //给输入框赋值</div><div class="line">        path:<span class="string">'face/'</span>    //表情图片存放的路径</div><div class="line">    &#125;);</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当选择表情图片后，输入框中会插入一段如[em_5]之类的代码，代表插入的表情图片，实际应用中，点提交按钮后应该将这段表情代码连同其他内容插入到数据表中。而在页面显示的时候，我们应该将表情代码替换成真正的图片显示在页面上。下面的代码是插入表情图片后，点击提交按钮，使用javascript自定义函数将表情代码替换并显示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    ...</div><div class="line">    $(<span class="string">".sub_btn"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var str = $(<span class="string">"#saytext"</span>).val();</div><div class="line">        $(<span class="string">"#show"</span>).html(replace_em(str));</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">function</span> replace_em(str)&#123;</div><div class="line">    str = str.replace(/\&lt;/g,<span class="string">'&lt;；'</span>);</div><div class="line">    str = str.replace(/\&gt;/g,<span class="string">'&gt;；'</span>);</div><div class="line">    str = str.replace(/\n/g,<span class="string">'&lt;；br/&gt;；'</span>);</div><div class="line">    str = str.replace(/\[em_([0-9]*)\]/g,<span class="string">'&lt;img src="face/$1.gif" border="0" /&gt;'</span>);</div><div class="line">    <span class="built_in">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面着重介绍下在nodejs+express4中的应用：</p>
<p>步骤如下：</p>
<ul>
<li>加入引用表情的span</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"send-out"</span>&gt;</div><div class="line">            &lt;span class=<span class="string">"emotion"</span> id=<span class="string">"emotion"</span>&gt;&lt;img class=<span class="string">"head_picture"</span> src=<span class="string">"/images/r-middle-pic07.png"</span>&gt;表情&lt;/span&gt;</div><div class="line">            &lt;input class=<span class="string">"send-text"</span> id=<span class="string">"Y_iSend_Input"</span> <span class="built_in">type</span>=<span class="string">"text"</span> maxlength=<span class="string">"100"</span> value=<span class="string">""</span>&gt;</div><div class="line">            &lt;input id=<span class="string">"Y_iSend_Bt"</span> class=<span class="string">"out_text"</span> onclick=<span class="string">"CHAT.submit();"</span> <span class="built_in">type</span>=<span class="string">"button"</span>  value=<span class="string">"发送"</span>/&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>加入头文件并调用jquery</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery.qqFace.js"</span>&gt;&lt;/script&gt;</div><div class="line"> $(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            $(<span class="string">'.emotion'</span>).qqFace(&#123;</div><div class="line">                assign:<span class="string">'Y_iSend_Input'</span>, //给输入框赋值</div><div class="line">                path:<span class="string">'/face/'</span>    //表情图片存放的路径</div><div class="line">           &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>用正则替换输入的[]表情</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">w.CHAT=&#123;</div><div class="line">replace_em: <span class="keyword">function</span> (str) &#123;</div><div class="line">            str = str.replace(/\&lt;/g, <span class="string">'&lt;;'</span>);</div><div class="line">            str = str.replace(/\&gt;/g, <span class="string">'&gt;;'</span>);</div><div class="line">            str = str.replace(/\n/g, <span class="string">'&lt;;br/&gt;;'</span>);</div><div class="line">            str = str.replace(/\[em_([0-9]*)\]/g, <span class="string">'&lt;img src="/face/$1.gif" border="0" /&gt;'</span>);</div><div class="line">            <span class="built_in">return</span> str;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        //提交聊天消息内容</div><div class="line">        submit: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"></div><div class="line">            var str = $(<span class="string">"#Y_iSend_Input"</span>).val();</div><div class="line"></div><div class="line">            $(<span class="string">"#Y_iSend_Input"</span>).val(CHAT.replace_em(str));</div><div class="line"></div><div class="line">            var message_text = d.getElementById(<span class="string">"Y_iSend_Input"</span>).value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Socket FrameWork]]></title>
      <url>http://sunnode.github.io/2016/09/19/socket-framework/</url>
      <content type="html"><![CDATA[<h1 id="Socket-io-WebSocket-UwebSockets"><a href="#Socket-io-WebSocket-UwebSockets" class="headerlink" title="Socket.io,WebSocket,UwebSockets"></a>Socket.io,WebSocket,UwebSockets</h1><h2 id="三种socket框架简介"><a href="#三种socket框架简介" class="headerlink" title="三种socket框架简介"></a>三种socket框架简介</h2><blockquote>
<h2 id="UwebSockets-简介"><a href="#UwebSockets-简介" class="headerlink" title="UwebSockets 简介"></a>UwebSockets 简介</h2></blockquote>
<p>  µWebSockets简称µWS，是一个超轻量级的、高效的、可扩展的WebSocket服务器实现，基于Node.js开发，主要特征是易于使用、完全异步的面向对象的接口，并且可以扩展到数百万的连接，与同类的产品相比，其内存占用只有竞品的几分之一，采用zlib/libpng许可证（非常宽松的许可证，适合商业应用）。</p>
<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><pre><code>+ 支持Linux、OSX、Windows
+ 内建了负载平衡和支持多核
+ 支持SSL/TLS安全访问，且可以与外部HTTPS服务器相集成
+ 内建Permessage-deflate（读取压缩消息）
+ Node.js绑定对外暴露WS接口
+ 可选择作为如Socket.IO、Primus或SocketCluster库的ws引擎
</code></pre><blockquote>
<h2 id="websocket-简介"><a href="#websocket-简介" class="headerlink" title="websocket 简介"></a>websocket 简介</h2></blockquote>
<p>WebSocket是html5规范新引入的功能，用于解决浏览器与后台服务器双向通讯的问题，使用WebSocket技术，后台可以随时向前端推送消息。</p>
<h3 id="主要特性-1"><a href="#主要特性-1" class="headerlink" title="主要特性"></a>主要特性</h3><pre><code>+ 简单轮询
+ 长轮询
</code></pre><blockquote>
<h2 id="socket-io-简介"><a href="#socket-io-简介" class="headerlink" title="socket.io 简介"></a>socket.io 简介</h2></blockquote>
<p>Socket.io是一个完全由JavaScript实现，基于Node.js、支持WebSocket的协议用于实时通信、跨平台的开源框架，它包括了客户端的JavaScript和服务器端的Node.js.</p>
<h3 id="主要特性-2"><a href="#主要特性-2" class="headerlink" title="主要特性"></a>主要特性</h3><pre><code>+ 实时通信
+ 基于事件
+ 基于Node.js
+ 开源框架
+ 针对于webSockets的扩展
+ 二进制流
+ 没有互联网的依赖
</code></pre><blockquote>
<h2 id="Socket-io-VS-uWebSocket"><a href="#Socket-io-VS-uWebSocket" class="headerlink" title="Socket.io VS uWebSocket"></a>Socket.io VS uWebSocket</h2></blockquote>
<p>uWebSocket较Socket.io来说生态圈还不是很完善,不是稳定版本。相对较优的方面在于它的轻量级,高度可扩展型框架。<br><img src="../../../images/compare-1.png" alt="比较示意图"><br>下图显示过去一段时间这两种框架热度:<br><img src="../../../images/compare-2.png" alt="比较示意图"></p>
<blockquote>
<h2 id="socket-io-VS-websocket-对比"><a href="#socket-io-VS-websocket-对比" class="headerlink" title="socket.io VS websocket 对比"></a>socket.io VS websocket 对比</h2></blockquote>
<p>WebSocket是HTML5的一种新通信协议，它实现了浏览器与服务器之间的双向通讯。而Socket.IO是一个完全由JavaScript实现、基于Node.js、支持WebSocket的协议用于实时通信、跨平台的开源框架，它包括了客户端的JavaScript和服务器端的Node.js。Socket.IO除了支持WebSocket通讯协议外，还支持许多种轮询（Polling）机制以及其它实时通信方式，并封装成了通用的接口，并且在服务端实现了这些实时机制的相应代码。Socket.IO实现的Polling通信机制包括Adobe Flash Socket、AJAX长轮询、AJAX multipart streaming、持久Iframe、JSONP轮询等。Socket.IO能够根据浏览器对通讯机制的支持情况自动地选择最佳的方式来实现网络实时应用。当前，Socket.IO最新版本是于2015年1月19日发布的1.3.0版本，该版本增强了稳定性和提高了性能，并修复了大量Bug。</p>
<p>Socket.IO已经具有众多强大功能的模块和扩展API，如（session.socket.io)（http session中间件，进行session相关操作）、socket.io-cookie（cookie解析中间件）、session-web-sockets（以安全的方式传递Session）、socket-logger（JSON格式的记录日志工具）、websocket.MQ（可靠的消息队列）、socket.io-mongo（使用MongoDB的适配器）、socket.io-redis（Redis的适配器）、socket.io-parser（服务端和客户端通讯的默认协议实现模块）等。</p>
<blockquote>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2></blockquote>
<p>在开发IO密集型应用的时候,完全可以以Socket.io为主体,将Socket.io的默认engine.io更换为uws,因为uws本身类库就支持socket.io扩展。</p>
<h3 id="Use-the-new-wsEngine-‘uws’-option-like-so"><a href="#Use-the-new-wsEngine-‘uws’-option-like-so" class="headerlink" title="Use the new wsEngine: ‘uws’ option like so:"></a>Use the new wsEngine: ‘uws’ option like so:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var io = require(<span class="string">'socket.io'</span>)(80, &#123; wsEngine: <span class="string">'uws'</span> &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul>
<li><a href="https://github.com/uWebSockets" title="uWebSockets" target="_blank" rel="external">uWebSockets</a></li>
<li><a href="https://github.com/socketCluster" title="socketCluster" target="_blank" rel="external">socketCluster</a></li>
<li><a href="https://github.com/socketio/socket.io" title="socket.io" target="_blank" rel="external">socket.io</a></li>
<li><a href="https://github.com/gorilla/websocket" title="websocket" target="_blank" rel="external">websocket</a></li>
<li><a href="https://github.com/M6Web/websocket-bench" title="websocket-bench" target="_blank" rel="external">websocket-bench</a></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://sunnode.github.io/2016/09/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
